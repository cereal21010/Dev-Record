자바스크립트의 특성
- 비동기 처리
(특정 코드의 실행이 완료될 때까지 기다리지 않고 다음 코드를 먼저 수행하는 자바스트립트의 특성)

- 이런 비동기 처리 방식 때문에 처리 후 실행되어야 할 코드에서 문제가 발생
- 해결 방법으로 콜백 함수를 사용한다.


import DB from './DB.js';

DB.getAllUsers( function myCallback(error, users) {
  if(error) {
    console.log('에러 발생!');
    console.log(error);
    return;
  }

  console.log('성공!');
  console.log(users);
})

를 호출할 때

function getAllUsers (callback_function) {
  if(user_list.length === 0) {
    callback_function(new Error('아무도 없다!'), undefined); //***
    return;
  }

  callback_function(undefined, user_list);
}

callback_function(undefined, user_list) 이런식으로 App.js의 myCallback함수를 사용한다

콜백함수란
-비동기처리의 문제점( 무슨 문제가 있는지는 나중에 작성 )을 해결하려고 사용된다.
-비동기 요청과 함께 함수(콜백 함수)를 전달한다.
-비동기 요청이 처리되고 같이 전달 받은 함수가 실행된다.
-결론 : 다른 코드에 인수로 넘겨주는 함수


promise

-promise 사용법
function getData( myCallback ){
	return new Promise(function( resolve, reject ) {
		$.get('url',function( response ) {
			resolve( response );	//실패시 reject
		});
	});
}

getDate().then(function( tableData ) {	// 성공시
	console.log( tableDate )
}).catch( function( err ) {	//에러처리
	console.log( err );
});

-promise 여러개 연결

getData( )
	.then( function( data ){
	// . . .
	}).then( function( data ){
	// . . .
	}).then( function( data ){
	// . . .
	});

- 에러처리 방법
1. then( )의 두 번째 인자로 에러를 처리
getData( ).then(
	handleSuccess,
	handleError
);

2. catch( )를 이용한 방법
getData( ).then( ).catch( );

- 첫 번째 방법으로 에러를 처리할 경우 then에서 발생하는 에러를 처리하지 못 하므로 catch()를 이용해 에러처리하는 것이 좋다
(catch( )는 then( ) 실행 도중 발생한 에러도 캐치한다. )



